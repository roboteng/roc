procedure List.18 (List.166, List.167, List.168):
    let List.637 : U64 = 0i64;
    let List.638 : U64 = CallByName List.6 List.166;
    let List.636 : List Str = CallByName List.95 List.166 List.167 List.168 List.637 List.638;
    ret List.636;

procedure List.2 (List.114, List.115):
    let List.631 : U64 = CallByName List.6 List.114;
    let List.627 : Int1 = CallByName Num.22 List.115 List.631;
    if List.627 then
        let List.629 : Str = CallByName List.66 List.114 List.115;
        inc List.629;
        let List.628 : [C {}, C Str] = TagId(1) List.629;
        ret List.628;
    else
        let List.626 : {} = Struct {};
        let List.625 : [C {}, C Str] = TagId(0) List.626;
        ret List.625;

procedure List.278 (List.279, List.280, List.276):
    let List.648 : Str = CallByName Test.3 List.280;
    let List.647 : List Str = CallByName List.71 List.279 List.648;
    ret List.647;

procedure List.5 (List.275, List.276):
    let List.277 : U64 = CallByName List.6 List.275;
    let List.634 : List Str = CallByName List.68 List.277;
    let List.633 : List Str = CallByName List.18 List.275 List.634 List.276;
    ret List.633;

procedure List.6 (#Attr.2):
    let List.632 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.632;

procedure List.66 (#Attr.2, #Attr.3):
    let List.630 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.630;

procedure List.68 (#Attr.2):
    let List.650 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.650;

procedure List.71 (#Attr.2, #Attr.3):
    let List.649 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.649;

procedure List.95 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.639 List.169 List.170 List.171 List.172 List.173:
        let List.641 : Int1 = CallByName Num.22 List.172 List.173;
        if List.641 then
            let List.645 : Str = CallByName List.66 List.169 List.172;
            inc List.645;
            let List.174 : List Str = CallByName List.278 List.170 List.645 List.171;
            dec List.645;
            let List.644 : U64 = 1i64;
            let List.643 : U64 = CallByName Num.51 List.172 List.644;
            jump List.639 List.169 List.174 List.171 List.643 List.173;
        else
            dec List.169;
            ret List.170;
    in
    inc #Derived_gen.0;
    jump List.639 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.236 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.236;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.237 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.237;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
