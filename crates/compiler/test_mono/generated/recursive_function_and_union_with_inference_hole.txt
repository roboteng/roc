procedure List.18 (List.166, List.167, List.168):
    let List.629 : U64 = 0i64;
    let List.630 : U64 = CallByName List.6 List.166;
    let List.628 : List [<rnnu>C List *self] = CallByName List.95 List.166 List.167 List.168 List.629 List.630;
    ret List.628;

procedure List.278 (List.279, List.280, List.276):
    let List.642 : [<rnnu>C List *self] = CallByName Test.2 List.280;
    let List.641 : List [<rnnu>C List *self] = CallByName List.71 List.279 List.642;
    ret List.641;

procedure List.5 (List.275, List.276):
    let List.277 : U64 = CallByName List.6 List.275;
    let List.626 : List [<rnnu>C List *self] = CallByName List.68 List.277;
    let List.625 : List [<rnnu>C List *self] = CallByName List.18 List.275 List.626 List.276;
    ret List.625;

procedure List.6 (#Attr.2):
    let List.639 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.639;

procedure List.66 (#Attr.2, #Attr.3):
    let List.638 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.638;

procedure List.68 (#Attr.2):
    let List.644 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.644;

procedure List.71 (#Attr.2, #Attr.3):
    let List.643 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.643;

procedure List.95 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.631 List.169 List.170 List.171 List.172 List.173:
        let List.633 : Int1 = CallByName Num.22 List.172 List.173;
        if List.633 then
            let List.637 : [<rnnu>C List *self] = CallByName List.66 List.169 List.172;
            inc List.637;
            let List.174 : List [<rnnu>C List *self] = CallByName List.278 List.170 List.637 List.171;
            let List.636 : U64 = 1i64;
            let List.635 : U64 = CallByName Num.51 List.172 List.636;
            jump List.631 List.169 List.174 List.171 List.635 List.173;
        else
            dec List.169;
            ret List.170;
    in
    inc #Derived_gen.0;
    jump List.631 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let #Derived_gen.9 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse #Derived_gen.9 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
