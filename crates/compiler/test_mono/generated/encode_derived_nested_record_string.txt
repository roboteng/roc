procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Test.22 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.10 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.10;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Test.20 #Derived.6;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Test.22 #Derived_gen.15;
    let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.14 #Derived.9;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName #Derived.2 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.115 : List U8 = CallByName Test.68 Encode.101 Encode.103 Encode.109;
    ret Encode.115;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.118 : List U8 = CallByName #Derived.7 Encode.101 Encode.103 Encode.109;
    ret Encode.118;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.121 : List U8 = CallByName Test.68 Encode.101 Encode.103 Encode.109;
    ret Encode.121;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.126 : List U8 = CallByName Test.57 Encode.101 Encode.103 Encode.109;
    ret Encode.126;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : Str = CallByName #Derived.0 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.18 (List.166, List.167, List.168):
    let List.626 : U64 = 0i64;
    let List.627 : U64 = CallByName List.6 List.166;
    let List.625 : List U8 = CallByName List.95 List.166 List.167 List.168 List.626 List.627;
    ret List.625;

procedure List.18 (List.166, List.167, List.168):
    let List.652 : U64 = 0i64;
    let List.653 : U64 = CallByName List.6 List.166;
    let List.651 : List U8 = CallByName List.95 List.166 List.167 List.168 List.652 List.653;
    ret List.651;

procedure List.4 (List.130, List.131):
    let List.673 : U64 = 1i64;
    let List.672 : List U8 = CallByName List.70 List.130 List.673;
    let List.671 : List U8 = CallByName List.71 List.672 List.131;
    ret List.671;

procedure List.6 (#Attr.2):
    let List.650 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.650;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.635 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.635;

procedure List.66 (#Attr.2, #Attr.3):
    let List.661 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.661;

procedure List.70 (#Attr.2, #Attr.3):
    let List.667 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.667;

procedure List.71 (#Attr.2, #Attr.3):
    let List.665 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.665;

procedure List.8 (#Attr.2, #Attr.3):
    let List.675 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.675;

procedure List.95 (#Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint List.628 List.169 List.170 List.171 List.172 List.173:
        let List.630 : Int1 = CallByName Num.22 List.172 List.173;
        if List.630 then
            let List.634 : {Str, Str} = CallByName List.66 List.169 List.172;
            inc List.634;
            let List.174 : List U8 = CallByName Test.71 List.170 List.634;
            let List.633 : U64 = 1i64;
            let List.632 : U64 = CallByName Num.51 List.172 List.633;
            jump List.628 List.169 List.174 List.171 List.632 List.173;
        else
            dec List.169;
            ret List.170;
    in
    inc #Derived_gen.26;
    jump List.628 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure List.95 (#Derived_gen.40, #Derived_gen.41, #Derived_gen.42, #Derived_gen.43, #Derived_gen.44):
    joinpoint List.654 List.169 List.170 List.171 List.172 List.173:
        let List.656 : Int1 = CallByName Num.22 List.172 List.173;
        if List.656 then
            let List.660 : {Str, Str} = CallByName List.66 List.169 List.172;
            inc List.660;
            let List.174 : List U8 = CallByName Test.71 List.170 List.660;
            let List.659 : U64 = 1i64;
            let List.658 : U64 = CallByName Num.51 List.172 List.659;
            jump List.654 List.169 List.174 List.171 List.658 List.173;
        else
            dec List.169;
            ret List.170;
    in
    inc #Derived_gen.40;
    jump List.654 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43 #Derived_gen.44;

procedure Num.127 (#Attr.2):
    let Num.286 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.286;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.96 (#Attr.2):
    let Num.285 : Str = lowlevel NumToStr #Attr.2;
    ret Num.285;

procedure Str.12 (#Attr.2):
    let Str.248 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.248;

procedure Str.36 (#Attr.2):
    let Str.249 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.249;

procedure Str.43 (#Attr.2):
    let Str.243 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.243;

procedure Str.9 (Str.71):
    let Str.72 : {U64, Str, Int1, U8} = CallByName Str.43 Str.71;
    let Str.240 : Int1 = StructAtIndex 2 Str.72;
    if Str.240 then
        let Str.242 : Str = StructAtIndex 1 Str.72;
        let Str.241 : [C {U64, U8}, C Str] = TagId(1) Str.242;
        ret Str.241;
    else
        let Str.238 : U8 = StructAtIndex 3 Str.72;
        let Str.239 : U64 = StructAtIndex 0 Str.72;
        let #Derived_gen.45 : Str = StructAtIndex 1 Str.72;
        dec #Derived_gen.45;
        let Str.237 : {U64, U8} = Struct {Str.239, Str.238};
        let Str.236 : [C {U64, U8}, C Str] = TagId(0) Str.237;
        ret Str.236;

procedure Test.20 (Test.56):
    let Test.325 : Str = CallByName Encode.23 Test.56;
    ret Test.325;

procedure Test.22 (Test.67):
    let Test.261 : List {Str, Str} = CallByName Encode.23 Test.67;
    ret Test.261;

procedure Test.22 (Test.67):
    let Test.293 : List {Str, Str} = CallByName Encode.23 Test.67;
    ret Test.293;

procedure Test.3 ():
    let Test.258 : {} = Struct {};
    ret Test.258;

procedure Test.4 (Test.49, Test.50, Test.51):
    let Test.322 : U8 = CallByName Num.127 Test.50;
    let Test.319 : List U8 = CallByName List.4 Test.49 Test.322;
    let Test.321 : Str = CallByName Num.96 Test.51;
    let Test.320 : List U8 = CallByName Str.12 Test.321;
    let Test.317 : List U8 = CallByName List.8 Test.319 Test.320;
    let Test.318 : U8 = 32i64;
    let Test.316 : List U8 = CallByName List.4 Test.317 Test.318;
    ret Test.316;

procedure Test.57 (Test.58, Test.275, Test.56):
    let Test.314 : I64 = 115i64;
    let Test.315 : U64 = CallByName Str.36 Test.56;
    let Test.312 : List U8 = CallByName Test.4 Test.58 Test.314 Test.315;
    let Test.313 : List U8 = CallByName Str.12 Test.56;
    let Test.310 : List U8 = CallByName List.8 Test.312 Test.313;
    let Test.311 : U8 = 32i64;
    let Test.309 : List U8 = CallByName List.4 Test.310 Test.311;
    ret Test.309;

procedure Test.68 (Test.69, Test.263, Test.67):
    let Test.291 : I64 = 114i64;
    let Test.292 : U64 = CallByName List.6 Test.67;
    let Test.70 : List U8 = CallByName Test.4 Test.69 Test.291 Test.292;
    let Test.266 : {} = Struct {};
    let Test.265 : List U8 = CallByName List.18 Test.67 Test.70 Test.266;
    ret Test.265;

procedure Test.68 (Test.69, Test.263, Test.67):
    let Test.323 : I64 = 114i64;
    let Test.324 : U64 = CallByName List.6 Test.67;
    let Test.70 : List U8 = CallByName Test.4 Test.69 Test.323 Test.324;
    let Test.298 : {} = Struct {};
    let Test.297 : List U8 = CallByName List.18 Test.67 Test.70 Test.298;
    ret Test.297;

procedure Test.71 (Test.72, Test.267):
    let Test.73 : Str = StructAtIndex 0 Test.267;
    let Test.74 : Str = StructAtIndex 1 Test.267;
    let Test.271 : Str = CallByName Test.20 Test.73;
    let Test.272 : {} = Struct {};
    let Test.269 : List U8 = CallByName Encode.24 Test.72 Test.271 Test.272;
    let Test.270 : {} = Struct {};
    let Test.268 : List U8 = CallByName Encode.24 Test.269 Test.74 Test.270;
    ret Test.268;

procedure Test.71 (Test.72, Test.267):
    let Test.73 : Str = StructAtIndex 0 Test.267;
    let Test.74 : Str = StructAtIndex 1 Test.267;
    let Test.303 : Str = CallByName Test.20 Test.73;
    let Test.304 : {} = Struct {};
    let Test.301 : List U8 = CallByName Encode.24 Test.72 Test.303 Test.304;
    let Test.302 : {} = Struct {};
    let Test.300 : List U8 = CallByName Encode.24 Test.301 Test.74 Test.302;
    ret Test.300;

procedure Test.0 ():
    let Test.260 : Str = "bar";
    let Test.257 : {} = CallByName Test.3;
    let Test.255 : List U8 = CallByName Encode.26 Test.260 Test.257;
    let Test.210 : [C {U64, U8}, C Str] = CallByName Str.9 Test.255;
    let Test.252 : U8 = 1i64;
    let Test.253 : U8 = GetTagId Test.210;
    let Test.254 : Int1 = lowlevel Eq Test.252 Test.253;
    if Test.254 then
        let Test.211 : Str = UnionAtIndex (Id 1) (Index 0) Test.210;
        ret Test.211;
    else
        dec Test.210;
        let Test.251 : Str = "<bad>";
        ret Test.251;
