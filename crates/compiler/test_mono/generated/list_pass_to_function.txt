procedure List.3 (List.122, List.123, List.124):
    let List.626 : {List I64, I64} = CallByName List.64 List.122 List.123 List.124;
    let List.625 : List I64 = StructAtIndex 0 List.626;
    ret List.625;

procedure List.6 (#Attr.2):
    let List.632 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.632;

procedure List.64 (List.119, List.120, List.121):
    let List.631 : U64 = CallByName List.6 List.119;
    let List.628 : Int1 = CallByName Num.22 List.120 List.631;
    if List.628 then
        let List.629 : {List I64, I64} = CallByName List.67 List.119 List.120 List.121;
        ret List.629;
    else
        let List.627 : {List I64, I64} = Struct {List.119, List.121};
        ret List.627;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.630 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.630;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
