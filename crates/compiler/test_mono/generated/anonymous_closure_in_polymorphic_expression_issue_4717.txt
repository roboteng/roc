procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.110 (List.539, List.540, List.541):
    let List.643 : U64 = 0i64;
    let List.644 : U64 = CallByName List.6 List.539;
    let List.642 : [C U64, C U64] = CallByName List.80 List.539 List.540 List.541 List.643 List.644;
    ret List.642;

procedure List.26 (List.207, List.208, List.209):
    let List.636 : [C U64, C U64] = CallByName List.110 List.207 List.208 List.209;
    let List.639 : U8 = 1i64;
    let List.640 : U8 = GetTagId List.636;
    let List.641 : Int1 = lowlevel Eq List.639 List.640;
    if List.641 then
        let List.210 : U64 = UnionAtIndex (Id 1) (Index 0) List.636;
        ret List.210;
    else
        let List.211 : U64 = UnionAtIndex (Id 0) (Index 0) List.636;
        ret List.211;

procedure List.38 (List.395, List.396):
    let List.635 : U64 = CallByName List.6 List.395;
    let List.397 : U64 = CallByName Num.77 List.635 List.396;
    let List.625 : List U8 = CallByName List.43 List.395 List.397;
    ret List.625;

procedure List.43 (List.393, List.394):
    let List.633 : U64 = CallByName List.6 List.393;
    let List.632 : U64 = CallByName Num.77 List.633 List.394;
    let List.627 : {U64, U64} = Struct {List.394, List.632};
    let List.626 : List U8 = CallByName List.49 List.393 List.627;
    ret List.626;

procedure List.49 (List.471, List.472):
    let List.629 : U64 = StructAtIndex 1 List.472;
    let List.630 : U64 = StructAtIndex 0 List.472;
    let List.628 : List U8 = CallByName List.72 List.471 List.629 List.630;
    ret List.628;

procedure List.6 (#Attr.2):
    let List.634 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.634;

procedure List.66 (#Attr.2, #Attr.3):
    let List.657 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.657;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.631 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.631;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.645 List.542 List.543 List.544 List.545 List.546:
        let List.647 : Int1 = CallByName Num.22 List.545 List.546;
        if List.647 then
            let List.656 : U8 = CallByName List.66 List.542 List.545;
            let List.648 : [C U64, C U64] = CallByName Test.4 List.543 List.656;
            let List.653 : U8 = 1i64;
            let List.654 : U8 = GetTagId List.648;
            let List.655 : Int1 = lowlevel Eq List.653 List.654;
            if List.655 then
                let List.547 : U64 = UnionAtIndex (Id 1) (Index 0) List.648;
                let List.651 : U64 = 1i64;
                let List.650 : U64 = CallByName Num.51 List.545 List.651;
                jump List.645 List.542 List.547 List.544 List.650 List.546;
            else
                dec List.542;
                let List.548 : U64 = UnionAtIndex (Id 0) (Index 0) List.648;
                let List.652 : [C U64, C U64] = TagId(0) List.548;
                ret List.652;
        else
            dec List.542;
            let List.646 : [C U64, C U64] = TagId(1) List.543;
            ret List.646;
    in
    inc #Derived_gen.0;
    jump List.645 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
